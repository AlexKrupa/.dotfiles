initscript {
  repositories {
    gradlePluginPortal()
  }
  dependencies {
    classpath 'com.adarshr:gradle-test-logger-plugin:4.0.0'
  }
}

allprojects {
  apply plugin: com.adarshr.gradle.testlogger.TestLoggerPlugin
    testlogger {
    theme 'mocha-parallel'
      showExceptions true
      showStackTraces true
      showFullStackTraces false
      showCauses true
      slowThreshold 1000
      showSummary true
      showSimpleNames true
      showPassed false
      showSkipped false
      showFailed true
      // showOnlySlow false
      showStandardStreams false
      showPassedStandardStreams true
      showSkippedStandardStreams true
      showFailedStandardStreams true
      logLevel 'lifecycle'
    }
}

gradle.afterProject { project ->
  // checkIdeBuilds(project)
  configureTests(project)
}

private static void checkIdeBuilds(project) {
  def isIdeBuild = project.hasProperty("android.injected.invoked.from.ide")
  def areIdeBuildsForbidden = project.getProperty("me.forbid.ide.builds") == "true"
  if (isIdeBuild && areIdeBuildsForbidden) {
    def buildCommand = "./gradlew " + project.gradle.startParameter.taskNames.join(" ")
      exec {
        commandLine("sh", "-c", "echo \"$buildCommand\" | pbcopy")
      }
    throw new RuntimeException("IDE builds forbidden. Command copied to clipboard, use it in your terminal.\n$buildCommand")
  }
}

private static void configureTests(project) {
  project.tasks.withType(Test) {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
  }
}

