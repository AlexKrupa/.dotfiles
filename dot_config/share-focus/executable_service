#!/bin/bash
# BetterDisplay sharing control script

CACHE_DIR="$HOME/.config/share-focus/.cache"
ENABLED_FILE="$CACHE_DIR/sharing-enabled"

VIRTUAL_DISPLAY="Sharing"
BD="/Applications/BetterDisplay.app/Contents/MacOS/BetterDisplay"

# Function to detect main display
detect_main_display() {
    # Get all display names from JSON output
    local display_names=$($BD get -identifiers | grep '"name"' | grep -v 'VirtualScreen\|DisplayGroup' | sed 's/.*"name" : "\([^"]*\)".*/\1/')

    # Check each display to find the main one
    while IFS= read -r display_name; do
        if [ -n "$display_name" ]; then
            local is_main=$($BD get -name="$display_name" -main)
            if [ "$is_main" = "true" ]; then
                echo "$display_name"
                return
            fi
        fi
    done <<< "$display_names"
}

# Function to ensure sync executable is available
ensure_sync_executable() {
    local sync_path="$HOME/.config/share-focus/sync"
    local swift_path="$HOME/.config/share-focus/sync.swift"

    if [ ! -f "$sync_path" ]; then
        if [ -f "$swift_path" ]; then
            echo "Compiling sync executable"
            swiftc "$swift_path" -o "$sync_path"
            if [ $? -ne 0 ]; then
                echo "Error: Failed to compile sync executable"
                return 1
            fi
        else
            echo "Error: sync.swift not found"
            return 1
        fi
    fi
    return 0
}

# Function to ensure virtual display exists
ensure_virtual_display() {
    # Check if virtual display exists by trying to get its info
    local display_exists=$($BD get -name="$VIRTUAL_DISPLAY" 2>/dev/null)

    if [ -z "$display_exists" ]; then
        echo "Creating virtual display: $VIRTUAL_DISPLAY"
        $BD create -type=VirtualScreen -virtualScreenName="$VIRTUAL_DISPLAY"
        if [ $? -ne 0 ]; then
            echo "Error: Failed to create virtual display"
            return 1
        fi
    fi
    return 0
}

# Function to start sharing
start() {
    # Ensure sync executable is available
    if ! ensure_sync_executable; then
        return 1
    fi

    # Ensure virtual display exists
    if ! ensure_virtual_display; then
        return 1
    fi

    # Detect main display
    echo "Detecting main display"
    MAIN_DISPLAY=$(detect_main_display)

    if [ -z "$MAIN_DISPLAY" ]; then
        echo "Error: No main display found"
        return 1
    fi

    echo "Found main display: $MAIN_DISPLAY"

    # Connect the virtual display
    echo "Connecting virtual display: $VIRTUAL_DISPLAY"
    $BD set -name="$VIRTUAL_DISPLAY" -connected=on

    # Wait for virtual display to initialize
    sleep 0.5

    # Stream from main to virtual display
    echo "Streaming $MAIN_DISPLAY â†’ $VIRTUAL_DISPLAY"
    $BD set -name="$MAIN_DISPLAY" -stream=on -targetName="$VIRTUAL_DISPLAY"

    # Get main display resolution using BetterDisplay
    RESOLUTION=$($BD get -name="$MAIN_DISPLAY" -resolution | sed 's/x/ /')
    echo "$MAIN_DISPLAY|$RESOLUTION" > "$ENABLED_FILE"

    # Initial run
    ~/.config/share-focus/sync

    echo "Sharing enabled"
}

# Function to stop sharing
stop() {
    # Disconnect the virtual display and remove flag
    echo "Disconnecting virtual display: $VIRTUAL_DISPLAY"
    $BD set -name="$VIRTUAL_DISPLAY" -connected=off

    rm -f "$ENABLED_FILE"
    echo "Sharing disabled"
}

mkdir -p "$CACHE_DIR"

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        if [ -f "$ENABLED_FILE" ]; then
            echo "Sharing enabled"
        else
            echo "Sharing disabled"
        fi
        ;;
    "")
        # Toggle: start if stopped, stop if started
        if [ -f "$ENABLED_FILE" ]; then
            stop
        else
            start
        fi
        ;;
    *)
        echo "Usage: sharing {start|stop|status}"
        exit 1
        ;;
esac
