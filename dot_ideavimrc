source ~/.vimrc

" IdeaVim
" https://github.com/JetBrains/ideavim/blob/master/doc/set-commands.md
" https://towardsdatascience.com/the-essential-ideavim-remaps-291d4cd3971b

" Syntax for binding IDE actions.
" <Action>(CommandName)
" :action CommandName<CR>
" Both are valid approaches, but <Action> is more readable.
" However, it doesn't work for with `nore` commands, so use :action in those cases.
" List of action ids: https://gist.github.com/zchee/9c78f91cc5ad771c1f5d

" edit .ideavimrc with \i, reload with \r
nnoremap \i :e ~/.ideavimrc<CR>
"nnoremap \r :source ~/.ideavimrc<CR>
nnoremap \r :action IdeaVim.ReloadVimRc.reload<CR>

" enable using the system clipboard from IdeaVim and vice-versa
set clipboard+=unnamed
set clipboard+=ideaput

" https://github.com/JetBrains/ideavim/blob/ae1ad9fd2e756063e3d768f5bd74e65de889b7e9/doc/ideajoin-examples.md
" J (shift-j)
set ideajoin
set idearefactormode=keep
set ideastatusicon=disabled

set visualbell






"-------------------
"----- PLUGINS -----
"-------------------

" Which-Key plugin setup (available keybindings in popup)
set which-key
set notimeout
"set timeoutlen=5000

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'

Plug 'preservim/nerdtree'
let g:NERDTreeMapPreview = 'O'

set multicursor
Plug 'terryma/vim-multiple-cursors'
Plug 'tommcdo/vim-exchange'

" highlightedyank plugin setup
Plug 'machakann/vim-highlightedyank'
let g:highlightedyank_highlight_duration = "500"
let g:highlightedyank_highlight_color = "rgba(57, 197, 187, 155)"

Plug 'dbakker/vim-paragraph-motion'
Plug 'vim-scripts/ReplaceWithRegister'
Plug 'kana/vim-textobj-entire'

" <count>ai	An Indentation level and line above.
" <count>ii	Inner Indentation level (no line above).
" <count>aI	An Indentation level and lines above/below.
" <count>iI	Inner Indentation level (no lines above/below).
Plug 'michaeljsmith/vim-indent-object'

" if - "inner function" - selects the function body (excluding braces)
" af - "around function" - selects the entire function (including braces and signature)
set functiontextobj

Plug 'vim-scripts/argtextobj.vim'
" select items in a list or generic class definition in Java/Kotlin
let g:argtextobj_pairs="[:],(:),<:>"

" In normal mode: Press " to see registers before using them in commands
" In insert mode: Press Ctrl-R to see registers before pasting their contents
set peekaboo

" Switch plugin setup
set switch
nnoremap <C-s> :Switch<CR>
nnoremap <C-S-s> :SwitchReverse<CR>
let g:switch_definitions = 'group:basic'
" Some custom definitions exist in built-in ones, but let's define them for visibility.
let g:switch_custom_definitions = [
  \ switchWords(['val', 'var']),
  \ switchWords(['private', 'internal', 'protected', 'public']),
  \ switchWords(['interface', 'class', 'object']),
  \ switchWords(['open', 'abstract', 'sealed']),
  \ switchWords(['isEmpty', 'isNotEmpty']),
  \ switchWords(['check', 'require']),
  \ switchWords(['checkNotNull', 'requireNotNull']),
  \ switchWords(['isBlank', 'isNotBlank']),
  \ switchWords(['onSuccess', 'onFailure']),
  \ switchWords(['shouldBe', 'shouldNotBe']),
  \ switchWords(['shouldBeNull', 'shouldNotBeNull']),
  \ switchWords(['shouldBeSuccess', 'shouldBeFailure']),
  \ switchWords(['shouldBeTrue', 'shouldBeFalse']),
  \ switchWords(['ON_CREATE', 'ON_START', 'ON_RESUME', 'ON_PAUSE', 'ON_STOP', 'ON_DESTROY']),
  \ switchWords(['INITIALIZED', 'CREATED', 'STARTED', 'RESUMED', 'PAUSED', 'STOPPED', 'DESTROYED']),
  \ switchWords(['Log.i', 'Log.d', 'Log.w', 'Log.e', 'Log.wtf']),
  \ switchWords(['Timber.i', 'Timber.d', 'Timber.w', 'Timber.e', 'Timber.wtf']),
  \ switchNormalizedCaseWords(['on', 'off']),
  \ switchNormalizedCaseWords(['foreground', 'background']),
  \ switchNormalizedCaseWords(['horizontal', 'vertical']),
  \ switchNormalizedCaseWords(['visible', 'invisible']),
  \ switchNormalizedCaseWords(['before', 'after']),
  \ switchNormalizedCaseWords(['below', 'above']),
  \ switchNormalizedCaseWords(['under', 'over']),
  \ switchNormalizedCaseWords(['top', 'bottom', 'start', 'end']),
  \ switchNormalizedCaseWords(['width', 'height']),
  \ switchNormalizedCaseWords(['light', 'dark']),
  \ switchNormalizedCaseWords(['day', 'night']),
  \ switchNormalizedCaseWords(['first', 'last']),
  \ switchNormalizedCaseWords(['min', 'max']),
  \ switchNormalizedCaseWords(['old', 'new']),
  \ switchNormalizedCaseWords(['previous', 'current', 'next']),
  \ switchNormalizedCaseWords(['accept', 'decline']),
  \ switchNormalizedCaseWords(['accepted', 'declined']),
  \ switchNormalizedCaseWords(['accepting', 'declining']),
  \ switchNormalizedCaseWords(['accepts', 'declines']),
  \ switchNormalizedCaseWords(['activate', 'deactivate']),
  \ switchNormalizedCaseWords(['activated', 'deactivated']),
  \ switchNormalizedCaseWords(['activates', 'deactivates']),
  \ switchNormalizedCaseWords(['activating', 'deactivating']),
  \ switchNormalizedCaseWords(['active', 'inactive']),
  \ switchNormalizedCaseWords(['allow', 'deny']),
  \ switchNormalizedCaseWords(['allowed', 'denied']),
  \ switchNormalizedCaseWords(['allowing', 'denying']),
  \ switchNormalizedCaseWords(['allows', 'denies']),
  \ switchNormalizedCaseWords(['attach', 'detach']),
  \ switchNormalizedCaseWords(['attached', 'detached']),
  \ switchNormalizedCaseWords(['attaches', 'detaches']),
  \ switchNormalizedCaseWords(['attaching', 'detaching']),
  \ switchNormalizedCaseWords(['enable', 'disable']),
  \ switchNormalizedCaseWords(['enabled', 'disabled']),
  \ switchNormalizedCaseWords(['enables', 'disables']),
  \ switchNormalizedCaseWords(['enabling', 'disabling']),
  \ switchNormalizedCaseWords(['enter', 'exit']),
  \ switchNormalizedCaseWords(['enters', 'exits']),
  \ switchNormalizedCaseWords(['expand', 'collapse']),
  \ switchNormalizedCaseWords(['expanded', 'collapsed']),
  \ switchNormalizedCaseWords(['expanding', 'collapsing']),
  \ switchNormalizedCaseWords(['expands', 'collapses']),
  \ switchNormalizedCaseWords(['grant', 'revoke']),
  \ switchNormalizedCaseWords(['granted', 'revoked']),
  \ switchNormalizedCaseWords(['granting', 'revoking']),
  \ switchNormalizedCaseWords(['grants', 'revokes']),
  \ switchNormalizedCaseWords(['include', 'exclude']),
  \ switchNormalizedCaseWords(['included', 'excluded']),
  \ switchNormalizedCaseWords(['includes', 'excludes']),
  \ switchNormalizedCaseWords(['including', 'excluding']),
  \ switchNormalizedCaseWords(['increase', 'decrease']),
  \ switchNormalizedCaseWords(['increased', 'decreased']),
  \ switchNormalizedCaseWords(['increases', 'decreases']),
  \ switchNormalizedCaseWords(['increasing', 'decreasing']),
  \ switchNormalizedCaseWords(['open', 'close']),
  \ switchNormalizedCaseWords(['opened', 'closed']),
  \ switchNormalizedCaseWords(['opening', 'closing']),
  \ switchNormalizedCaseWords(['opens', 'closes']),
  \ switchNormalizedCaseWords(['show', 'hide']),
  \ switchNormalizedCaseWords(['showing', 'hiding']),
  \ switchNormalizedCaseWords(['shown', 'hidden']),
  \ switchNormalizedCaseWords(['shows', 'hides']),
  \ switchNormalizedCaseWords(['succeeded', 'failed']),
  \ switchNormalizedCaseWords(['succeeding', 'failing']),
  \ switchNormalizedCaseWords(['succeeds', 'fails']),
  \ switchNormalizedCaseWords(['success', 'failure']),
  \ switchNormalizedCaseWords(['valid', 'invalid']),
  \ switchNormalizedCaseWords(['validated', 'invalidated']),
  \ switchNormalizedCaseWords(['validates', 'invalidates']),
  \ switchNormalizedCaseWords(['validating', 'invalidating'])
\ ]

" Flash plugin setup
map s <Action>(flash.search)

" Sneak plugin setup
"set sneak
"let g:sneak#label = 1
"nnoremap s <Plug>Sneak_s
"nnoremap S <Plug>Sneak_S
" Unfortunately these don't work in IdeaVim: https://github.com/Mishkun/ideavim-sneak/issues/28
"map f <Plug>Sneak_f
"map F <Plug>Sneak_F
"map t <Plug>Sneak_t
"map T <Plug>Sneak_T

" quickscope plugin setup
" Must be after vim-sneak
"set quickscope
" Highlight only on key press
"let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" EasyMotion plugin setup
"Plug 'easymotion/vim-easymotion'
"map <Leader> <Plug>(easymotion-prefix)





"--------------------
"----- MAPPINGS -----
"--------------------

" Redo with U
map U <C-R>

" Don't yank x to default register
nnoremap x \"_x
vnoremap x \"_x

" Don't yank d to register if prefixed by leader
nnoremap <leader>d \"_d
vnoremap <leader>d \"_d

" Don't yank selection to register if pasting prefixed by leader
vnoremap <leader>p \"_dP

" Remove prefix
" Go to start of word, toggle case and start typing. E.g. `<leader>iget`: `property` -> `getProperty`
map <leader>i wb~hi

" Add prefix
" Remove selection and toggle case. E.g. `v2l<leader>u`: `getProperty` -> `property`
vmap <leader>u d~h

" Move between blocks
map <C-j> }
map <C-k> {

vmap J <Action>(MoveLineDown)
vmap K <Action>(MoveLineUp)

"nmap [[ <Action>(MethodUp)
"nmap ]] <Action>(MethodDown)

" []
nmap [e <Action>(GotoPreviousError)
nmap ]e <Action>(GotoNextError)
nmap [u <Action>(GotoPrevElementUnderCaretUsage)
nmap ]u <Action>(GotoNextElementUnderCaretUsage)
nmap [o <Action>(PreviousOccurence)
nmap ]o <Action>(NextOccurence)
nmap [m <Action>(MethodUp)
nmap ]m <Action>(MethodDown)
nmap [c <Action>(JumpToLastChange)
nmap ]c <Action>(JumpToNextChange)
map <leader>z <Action>(ToggleDistractionFreeMode)
map <leader>x <Action>(HideAllWindows)
" Idea smart-select (expanding selection)
nmap <A-j> <Action>(EditorUnSelectWord)
nmap <A-k> <Action>(EditorSelectWord)
vmap <A-j> <Action>(EditorUnSelectWord)
vmap <A-k> <Action>(EditorSelectWord)
" goto
nmap <leader>a <Action>(GotoAction)
nmap ga <Action>(GotoAction)
nmap ge <Action>(GotoNextError)
nmap gb <Action>(Back)
nmap gd <Action>(GotoDeclaration)
nmap gD <Action>(GotoTypeDeclaration)
nmap gf <Action>(Forward)
nmap gi <Action>(GotoImplementation)
nmap gI <Action>(ShowIntentionActions)
nmap gl <Action>(QuickJavaDoc)
nmap gL <Action>(QuickImplementations)
nmap gn <Action>(ShowNavBar)
nmap go <Action>(GotoSuperMethod)
nmap gt <Action>(GotoTest)
nmap gT <Action>(TextSearchAction)
nmap gy <Action>(ShowErrorDescription)

" menu
nmap <leader>ms <Action>(ScopeViewPopupMenu)
nmap <leader>mw <Action>(ToolWindowsGroup)

" copy
nmap <leader>yp <Action>(CopyAbsolutePath)
nmap <leader>yr <Action>(CopyReference)


" file
nmap <leader>rf <Action>(RecentFiles)
nmap <leader>rl <Action>(RecentLocations)
"nmap <leader>si <Action>(SelectIn)
nmap <leader>fp <Action>(FindInPath)
nmap <leader>rp <Action>(ReplaceInPath)

" tag
nmap <leader>fu <Action>(FindUsages)
nmap <leader>fs <Action>(FileStructurePopup)
nmap <leader>su <Action>(ShowUsages)
nmap <leader>hl <Action>(HighlightUsagesInFile)
nmap <leader>qp <Action>(QuickPreview)
nmap <leader>qd <Action>(QuickDefinition)
nmap <leader>qD <Action>(QuickTypeDefinition)

" code
map <leader>cl <Action>(CommentByLineComment)
map <leader>cb <Action>(CommentByBlockComment)
nmap <leader>qf <Action>(ShowIntentionActions)
nmap <leader>se <Action>(ShowErrorDescription)
nmap <leader>om <Action>(OverrideMethods)
"nmap <leader>im <Action>(ImplementMethods)
nmap <leader>so <Action>(SelectAllOccurrences)
nmap <leader>gc <Action>(Generate)
nmap <leader>gt <Action>(GotoTest)

" bookmark
nmap mm <Action>(ToggleBookmark)
nmap ms <Action>(ShowBookmarks)

" run
nmap <leader>rx <Action>(ChooseRunConfiguration)
nmap <leader>rr <Action>(Rerun)
nmap <leader>rs <Action>(Stop)
"map <leader>q <Action>(Stop)

" debug
nmap <leader>dx <Action>(Debug)
nmap <leader>db <Action>(ToggleLineBreakpoint)
nmap <leader>de <Action>(EditBreakpoint)
nmap <leader>dv <Action>(ViewBreakpoints)

map <leader>v <Action>(Vcs.QuickListPopupAction)
"map <leader>b <Action>(ToggleLineBreakpoint)
map <leader>bv <Action>(ActivateBuildVariantsToolWindow)
nmap <leader>ch <Action>(CallHierarchy)
" Highlight usages, use CMD+G/Shift+CMD+G to iterate
nmap <leader>hu <Action>(HighlightUsagesInFile)
"nmap <leader>q <Action>(ToggleRenderedDocPresentation)
nmap <leader>s <Action>(ShowUsages)
nmap <leader>t <Action>(TypeHierarchy)
nmap <leader>u <Action>(FindUsages)
map <leader>f <Action>(FileStructurePopup)
"map <leader>a <Action>(Annotate) " git blame/annotate

" refactor
"nmap <leader>r <Action>(RenameElement)
"nmap <leader>m <Action>(MoveElement)
"nmap <leader>= <Action>(ReformatCode)
"nmap <leader>o <Action>(OptimizeImports)
"map <leader>t <Action>(Refactorings.QuickListPopupAction)
nmap <leader>rn <Action>(RenameElement)
nmap <leader>ra <Action>(Refactorings.QuickListPopupAction)
"nmap <leader>uw <Action>(Unwrap)
"nmap <leader>sw <Action>(SurroundWith)
"nmap <leader>sd <Action>(SafeDelete)
nmap <leader>oi <Action>(OptimizeImports)
"nmap <leader>rf <Action>(ReformatCode)
nmap <leader>ff <Action>(ReformatCode)

" hierarchy
nmap <leader>hc <Action>(CallHierarchy)
nmap <leader>hm <Action>(MethodHierarchy)
nmap <leader>ht <Action>(TypeHierarchy)

" collapse/expand regions
nmap zz <Action>(ExpandCollapseToggleAction)
nmap za <Action>(CollapseAllRegions)
nmap zA <Action>(ExpandAllRegions)

"nnoremap zc :action CollapseRegion<CR>
"nnoremap zo :action ExpandRegion<CR>
"nnoremap <leader>zc :action CollapseAllRegions<CR>
"nnoremap <leader>zo :action ExpandAllRegions<CR>

" splits
map <leader>H <Action>(SplitHorizontally)
map <leader>V <Action>(SplitVertically)
map <c-\> <Action>(SplitVertically)
map <c--> <Action>(SplitHorizontally)
map <c-=> <Action>(Unsplit)
map <c-[> <Action>(PrevSplitter)
map <c-]> <Action>(NextSplitter)


"------------------
"----- MACROS -----
"------------------

" Log selection
vnoremap <leader>ltv yoTimber.v("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>lti yoTimber.i("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>ltd yoTimber.d("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>ltw yoTimber.w("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>lte yoTimber.e("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>ltf yoTimber.wtf("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>llv yoLog.v("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>lli yoLog.i("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>lld yoLog.d("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>llw yoLog.w("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>lle yoLog.e("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>llf yoLog.wtf("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>lp yoprintln("<Esc>pa=${<Esc>pa}")<Esc>

" Format whole file or selection JSON with jq
nnoremap <silent> <leader>fj :%!jq<CR>
vnoremap <silent> <leader>fj :'<,'>!jq<CR>
nnoremap <silent> <leader>fcj :%!jq --compact-output<CR>
vnoremap <silent> <leader>fcj :'<,'>!jq --compact-output<CR>


"-----------------------
"----- HARPOON(ER) -----
"-----------------------

nmap <leader>hm :action HarpoonerQuickMenu<cr>
nmap <leader>ha :action HarpoonerAddFile<cr>
"nmap <M-b> :action HarpoonerOpenFile0<cr>
"nmap <M-n> :action HarpoonerOpenFile1<cr>
nmap <M-m> :action HarpoonerOpenFile0<cr>
nmap <M-,> :action HarpoonerOpenFile1<cr>
nmap <M-.> :action HarpoonerOpenFile2<cr>
nmap <M-/> :action HarpoonerOpenFile3<cr>
" nmap <M-6> :action HarpoonerOpenFile6<cr>
" nmap <M-7> :action HarpoonerOpenFile7<cr>
" nmap <M-8> :action HarpoonerOpenFile8<cr>
" nmap <M-9> :action HarpoonerOpenFile9<cr>


"---------------------
"----- FUNCTIONS -----
"---------------------

" Invert
" Disabled because ideavim-switch is better
function! Invert(calledFromVisual)
  let antonyms = ['true', 'false', 'after', 'before', 'start', 'end', 'left', 'right', 'bottom', 'top',
                 \'first', 'last', 'enable', 'disable', 'enabled', 'disabled', 'valid', 'invalid', 'on', 'off',
                 \'up', 'down', 'shouldBeTrue', 'shouldBeFalse',
                 \'True', 'False', 'After', 'Before', 'Start', 'End', 'Left', 'Right', 'Bottom', 'Top',
                 \'First', 'Last', 'Enable', 'Disable', 'Enabled', 'Disabled', 'Valid', 'Invalid', 'On', 'Off',
                 \'Up', 'Down',
                 \'==', '!=', '===', '!==']

  if a:calledFromVisual
    normal gv"wy
  else
    normal "wyiw
  endif
  let wordUnderCaret = @w

  let eraseWord = a:calledFromVisual ? 'gvc' : 'ciw'
  let count = 0
  while (count < len(antonyms))
    if (antonyms[count] ==# wordUnderCaret)
      let antonym = (count % 2 ==? 0) ? antonyms[count + 1] : antonyms[count - 1]
      execute 'normal ' .. eraseWord .. antonym
      break
    endif
    let count += 1
  endwhile
endfunction

"nnoremap ! :call Invert(0)<CR>
"vnoremap ! :<C-u>call Invert(1)<CR>
