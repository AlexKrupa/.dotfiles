source ~/.vimrc

" IdeaVim
" https://github.com/JetBrains/ideavim/blob/master/doc/set-commands.md
" https://towardsdatascience.com/the-essential-ideavim-remaps-291d4cd3971b

" Syntax for binding IDE actions:
" <Action>(CommandName)
" :action CommandName<CR>
"
" Both are valid approaches, but <Action> is more readable.
" However, it doesn't work for with `nore` commands, so use :action in those cases.
" List of action ids: https://centic9.github.io/IntelliJ-Action-IDs/
" or execute the :actionlist IdeaVim command.


" Don't use "end of line comments", Vim will interpret " as a part of a binding

" edit .ideavimrc with \i, reload with \r
nnoremap \i :e ~/.ideavimrc<CR>
"nnoremap \r :source ~/.ideavimrc<CR>
nnoremap \r :action IdeaVim.ReloadVimRc.reload<CR>

" enable using the system clipboard from IdeaVim and vice-versa
set clipboard+=unnamed
set clipboard+=ideaput

" https://github.com/JetBrains/ideavim/blob/ae1ad9fd2e756063e3d768f5bd74e65de889b7e9/doc/ideajoin-examples.md
" J (shift-j)
set ideajoin
" Map Vim marks to IDEA global marks
set ideamarks
set idearefactormode=keep
set ideastatusicon=disabled
" Use Vim in IDE dialogs
set ideavimsupport=dialog

" Match XML/HTML tags with %
set matchit

set visualbell

"-------------------------------
"----- Vim vs IDE handlers -----
"-------------------------------

sethandler <C-Tab> a:vim
sethandler <C-0> a:vim
sethandler <C-1> a:vim
sethandler <C-2> a:vim
sethandler <C-S-2> a:vim
sethandler <C-3> a:vim
sethandler <C-4> a:vim
sethandler <C-5> a:vim
sethandler <C-6> a:vim
sethandler <C-S-6> a:vim
sethandler <C-7> a:vim
sethandler <C-8> a:vim
sethandler <C-9> a:vim
sethandler <C-A> a:vim
sethandler <C-B> a:vim
sethandler <C-C> a:vim
sethandler <C-D> a:vim
sethandler <C-E> a:vim
sethandler <C-F> a:vim
sethandler <C-G> a:vim
sethandler <C-H> a:vim
sethandler <A-C-H> a:vim
sethandler <C-I> a:vim
sethandler <C-J> a:vim
sethandler <C-L> a:vim
sethandler <A-C-L> a:vim
sethandler <C-M> a:vim
sethandler <A-N> a:vim
sethandler <C-O> a:vim
sethandler <A-S-O> a:vim
sethandler <C-P> a:vim
sethandler <A-P> a:vim
sethandler <C-R> a:vim
sethandler <C-S> a:vim
sethandler <C-T> a:vim
sethandler <C-V> a:vim
sethandler <C-W> a:vim
sethandler <C-Y> a:vim

"-------------------
"----- PLUGINS -----
"-------------------

" Which-Key plugin setup (available keybindings in popup)
set which-key
set notimeout
"set timeoutlen=5000
let g:WhichKey_DefaultDelay = 0 " default is 200

" gc{motion}  Comment or uncomment lines that {motion} moves over.
" gcc         Comment or uncomment [count] lines.
" {Visual}gc  Comment or uncomment the highlighted lines.
" gc          Text object for a comment (operator pending mode
" gcgc, gcu   Uncomment the current and adjacent commented lines.
Plug 'tpope/vim-commentary'

Plug 'tpope/vim-surround'

" cx{motion} Used in pairs.
"            FIRST USE: define the first region of text to be exchanged. Any valid {motion} can be used.
"            SECOND USE: define the second region of text and perform the exchange.
"            Note: If a region was defined accidentally, it can be cleared with |cxc|
" cxx        Like |cx|, but for the current line. |linewise|
" cxc        Clear any defined region of text (previously defined by a |cx| command)
" {Visual}X  Can be used in visual mode.
Plug 'tommcdo/vim-exchange'

Plug 'terryma/vim-multiple-cursors'
" Remap multiple-cursors shortcuts to match terryma/vim-multiple-cursors
nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
xmap <C-x> <Plug>SkipOccurrence
xmap <C-p> <Plug>RemoveOccurrence
" Note that the default <A-n> and g<A-n> shortcuts don't work on Mac due to dead keys.
" <A-n> is used to enter accented text e.g. Ã±
" Feel free to pick your own mappings that are not affected. I like to use <leader>
nmap <leader><C-n> <Plug>AllWholeOccurrences
xmap <leader><C-n> <Plug>AllWholeOccurrences
nmap <leader>g<C-n> <Plug>AllOccurrences
xmap <leader>g<C-n> <Plug>AllOccurrences

Plug 'preservim/nerdtree'
let g:NERDTreeMapPreview = 'O'

" highlightedyank plugin setup
Plug 'machakann/vim-highlightedyank'
let g:highlightedyank_highlight_duration = "500"
let g:highlightedyank_highlight_color = "rgba(57, 197, 187, 155)"

Plug 'dbakker/vim-paragraph-motion'
Plug 'kana/vim-textobj-entire'

" <count>ai	 An Indentation level and line above.
" <count>ii	 Inner Indentation level (no line above).
" <count>aI	 An Indentation level and lines above/below.
" <count>iI	 Inner Indentation level (no lines above/below).
Plug 'michaeljsmith/vim-indent-object'

" if - "inner function" - selects the function body (excluding braces)
" af - "around function" - selects the entire function (including braces and signature)
set functiontextobj

Plug 'vim-scripts/argtextobj.vim'
" select items in a list or generic class definition in Java/Kotlin
let g:argtextobj_pairs="[:],(:),<:>"

" In normal mode: Press " to see registers before using them in commands
" In insert mode: Press Ctrl-R to see registers before pasting their contents
set peekaboo

" Switch plugin setup
set switch
nnoremap <C-s> :Switch<CR>
nnoremap <C-S-s> :SwitchReverse<CR>
let g:switch_definitions = 'group:basic'
" Some custom definitions exist in built-in ones, but let's define them for visibility.
let g:switch_custom_definitions = [
  \ switchWords(['val', 'var']),
  \ switchWords(['private', 'internal', 'protected', 'public']),
  \ switchWords(['interface', 'class', 'object']),
  \ switchWords(['open', 'abstract', 'sealed']),
  \ switchWords(['check', 'require']),
  \ switchWords(['checkNotNull', 'requireNotNull']),
  \ switchWords(['isEmpty', 'isNotEmpty']),
  \ switchWords(['isBlank', 'isNotBlank']),
  \ switchWords(['onSuccess', 'onFailure']),
  \ switchWords(['shouldBe', 'shouldNotBe']),
  \ switchWords(['shouldBeNull', 'shouldNotBeNull']),
  \ switchWords(['shouldBeSuccess', 'shouldBeFailure']),
  \ switchWords(['shouldBeTrue', 'shouldBeFalse']),
  \ switchWords(['ON_CREATE', 'ON_START', 'ON_RESUME', 'ON_PAUSE', 'ON_STOP', 'ON_DESTROY']),
  \ switchWords(['INITIALIZED', 'CREATED', 'STARTED', 'RESUMED', 'PAUSED', 'STOPPED', 'DESTROYED']),
  \ switchWords(['Log.v', 'Log.i', 'Log.d', 'Log.w', 'Log.e', 'Log.wtf']),
  \ switchWords(['Timber.v', 'Timber.i', 'Timber.d', 'Timber.w', 'Timber.e', 'Timber.wtf']),
  \ switchNormalizedCaseWords(['on', 'off']),
  \ switchNormalizedCaseWords(['foreground', 'background']),
  \ switchNormalizedCaseWords(['horizontal', 'vertical']),
  \ switchNormalizedCaseWords(['visible', 'invisible']),
  \ switchNormalizedCaseWords(['before', 'after']),
  \ switchNormalizedCaseWords(['below', 'above']),
  \ switchNormalizedCaseWords(['under', 'over']),
  \ switchNormalizedCaseWords(['top', 'bottom', 'start', 'end']),
  \ switchNormalizedCaseWords(['width', 'height']),
  \ switchNormalizedCaseWords(['light', 'dark']),
  \ switchNormalizedCaseWords(['day', 'night']),
  \ switchNormalizedCaseWords(['first', 'last']),
  \ switchNormalizedCaseWords(['min', 'max']),
  \ switchNormalizedCaseWords(['old', 'new']),
  \ switchNormalizedCaseWords(['previous', 'current', 'next']),
  \ switchNormalizedCaseWords(['accept', 'decline']),
  \ switchNormalizedCaseWords(['accepted', 'declined']),
  \ switchNormalizedCaseWords(['accepting', 'declining']),
  \ switchNormalizedCaseWords(['accepts', 'declines']),
  \ switchNormalizedCaseWords(['activate', 'deactivate']),
  \ switchNormalizedCaseWords(['activated', 'deactivated']),
  \ switchNormalizedCaseWords(['activates', 'deactivates']),
  \ switchNormalizedCaseWords(['activating', 'deactivating']),
  \ switchNormalizedCaseWords(['active', 'inactive']),
  \ switchNormalizedCaseWords(['allow', 'deny']),
  \ switchNormalizedCaseWords(['allowed', 'denied']),
  \ switchNormalizedCaseWords(['allowing', 'denying']),
  \ switchNormalizedCaseWords(['allows', 'denies']),
  \ switchNormalizedCaseWords(['attach', 'detach']),
  \ switchNormalizedCaseWords(['attached', 'detached']),
  \ switchNormalizedCaseWords(['attaches', 'detaches']),
  \ switchNormalizedCaseWords(['attaching', 'detaching']),
  \ switchNormalizedCaseWords(['enable', 'disable']),
  \ switchNormalizedCaseWords(['enabled', 'disabled']),
  \ switchNormalizedCaseWords(['enables', 'disables']),
  \ switchNormalizedCaseWords(['enabling', 'disabling']),
  \ switchNormalizedCaseWords(['enter', 'exit']),
  \ switchNormalizedCaseWords(['enters', 'exits']),
  \ switchNormalizedCaseWords(['expand', 'collapse']),
  \ switchNormalizedCaseWords(['expanded', 'collapsed']),
  \ switchNormalizedCaseWords(['expanding', 'collapsing']),
  \ switchNormalizedCaseWords(['expands', 'collapses']),
  \ switchNormalizedCaseWords(['grant', 'revoke']),
  \ switchNormalizedCaseWords(['granted', 'revoked']),
  \ switchNormalizedCaseWords(['granting', 'revoking']),
  \ switchNormalizedCaseWords(['grants', 'revokes']),
  \ switchNormalizedCaseWords(['include', 'exclude']),
  \ switchNormalizedCaseWords(['included', 'excluded']),
  \ switchNormalizedCaseWords(['includes', 'excludes']),
  \ switchNormalizedCaseWords(['including', 'excluding']),
  \ switchNormalizedCaseWords(['increase', 'decrease']),
  \ switchNormalizedCaseWords(['increased', 'decreased']),
  \ switchNormalizedCaseWords(['increases', 'decreases']),
  \ switchNormalizedCaseWords(['increasing', 'decreasing']),
  \ switchNormalizedCaseWords(['open', 'close']),
  \ switchNormalizedCaseWords(['opened', 'closed']),
  \ switchNormalizedCaseWords(['opening', 'closing']),
  \ switchNormalizedCaseWords(['opens', 'closes']),
  \ switchNormalizedCaseWords(['show', 'hide']),
  \ switchNormalizedCaseWords(['showing', 'hiding']),
  \ switchNormalizedCaseWords(['shown', 'hidden']),
  \ switchNormalizedCaseWords(['shows', 'hides']),
  \ switchNormalizedCaseWords(['succeeded', 'failed']),
  \ switchNormalizedCaseWords(['succeeding', 'failing']),
  \ switchNormalizedCaseWords(['succeeds', 'fails']),
  \ switchNormalizedCaseWords(['success', 'failure']),
  \ switchNormalizedCaseWords(['valid', 'invalid']),
  \ switchNormalizedCaseWords(['validated', 'invalidated']),
  \ switchNormalizedCaseWords(['validates', 'invalidates']),
  \ switchNormalizedCaseWords(['validating', 'invalidating'])
\ ]

"--------------------
"----- MAPPINGS -----
"--------------------

" splits
map <c-/> <Action>(SplitVertically)
map <c--> <Action>(SplitHorizontally)
map <c-=> <Action>(Unsplit)
map <c-tab> <Action>(NextSplitter)
map <m-h> <Action>(PrevSplitter)
map <m-l> <Action>(NextSplitter)
map <c-m-h> <Action>(StretchSplitToLeft)
map <c-m-l> <Action>(StretchSplitToRight)

" movements
nmap <c-m-j> <Action>(MethodDown)
nmap <c-m-k> <Action>(MethodUp)
nmap <c-h> <Action>(Back)
nmap <c-l> <Action>(Forward)
" experiment: match Vim history with shift for larger movements
nmap <c-s-i> <Action>(Back)
nmap <c-s-o> <Action>(Forward)

" Idea smart-select (expanding selection)
nmap <m-j> <Action>(EditorUnSelectWord)
nmap <m-k> <Action>(EditorSelectWord)
vmap <m-j> <Action>(EditorUnSelectWord)
vmap <m-k> <Action>(EditorSelectWord)

" re[f]actor / [f]ormat
map <leader>f <Action>(Refactorings.QuickListPopupAction)
nmap <leader>fd <Action>(SafeDelete)
nmap <leader>fec <Action>(IntroduceConstant)
nmap <leader>fef <Action>(IntroduceProperty)
nmap <leader>fem <Action>(ExtractMethod)
nmap <leader>fev <Action>(IntroduceVariable)
map <leader>ff <Action>(ReformatCode)
nmap <leader>fi <Action>(Inline)
" KDoc formatting plugin
nmap <leader>fk <Action>(ReflowKDoc)
map <leader>fo <Action>(OptimizeImports)
nmap <leader>fm <Action>(Move)
nmap <leader>fn <Action>(RenameElement)
nmap <leader>fss <Action>(StructuralSearchPlugin.StructuralSearchAction)
nmap <leader>fsr <Action>(StructuralSearchPlugin.StructuralReplaceAction)
" wrap
nmap <leader>fw <Action>(SurroundWith)
nmap <leader>fu <Action>(Unwrap)

" [g]enerate
nmap <leader>go <Action>(OverrideMethods)
nmap <leader>gi <Action>(ImplementMethods)
nmap <leader>gc <Action>(Generate)

" [g]oto
nmap ge <Action>(GotoNextError)
nmap gE <Action>(GotoPreviousError)
nmap gb <Action>(Back)
nmap gd <Action>(GotoDeclaration)
nmap gD <Action>(GotoTypeDeclaration)
nmap gf <Action>(Forward)
nmap gh <Action>(ShowHoverInfo)
nmap gi <Action>(ShowIntentionActions)
nmap gI <Action>(GotoImplementation)
nmap gl <Action>(QuickJavaDoc)
nmap gL <Action>(QuickImplementations)
nmap gn <Action>(ShowNavBar)
nmap go <Action>(GotoSuperMethod)
nmap gp <Action>(SelectInProjectView)
map gs <Action>(FileStructurePopup)
nmap gt <Action>(GotoTest)
nmap gu <Action>(ShowUsages)
nmap gU <Action>(FindUsages)
nmap gy <Action>(ShowErrorDescription)

" [s]earch
map <leader>sa <Action>(GotoAction)
map <leader>sc <Action>(GotoClass)
map <leader>se <Action>(SearchEverywhere)
map <leader>sf <Action>(GotoFile)
map <leader>sl <Action>(RecentLocations)
map <leader>so <Action>(ReplaceInPath)
map <leader>sp <Action>(FindInPath)
map <leader>sr <Action>(RecentFiles)
map <leader>ss <Action>(GotoSymbol)
map <leader>st <Action>(TextSearchAction)

" [h]ierarchy
nmap <leader>hc <Action>(CallHierarchy)
nmap <leader>hm <Action>(MethodHierarchy)
nmap <leader>ht <Action>(TypeHierarchy)

" [m]enus
map <leader>ma <Action>(com.developerphil.adbidea.action.AdbIdeaQuickList)
map <leader>ml <Action>(AnalyzeMenu)
map <leader>mp <Action>(ManageRecentProjects)
map <leader>mt <Action>(ToolWindowsGroup)
map <leader>ms <Action>(ScopeViewPopupMenu)

" book[m]arks
nmap mb <Action>(ShowBookmarks)
nmap mm <Action>(ToggleBookmark)

" quick actions
nmap <leader>qf <Action>(ShowIntentionActions)
nmap <leader>qp <Action>(QuickPreview)
nmap <leader>qd <Action>(QuickDefinition)
nmap <leader>qD <Action>(QuickTypeDefinition)
nmap <leader>qr <Action>(ToggleRenderedDocPresentation)

" [t]ool windows
map <leader>tb <Action>(ActivateBuildToolWindow)
map <leader>tc <Action>(ActivateCommitToolWindow)
map <leader>td <Action>(ActivateDebugToolWindow)
map <leader>te <Action>(ActivateRunningDevicesToolWindow)
map <leader>tf <Action>(ActivateFindToolWindow)
map <leader>th <Action>(ActivateHierarchyToolWindow)
map <leader>tl <Action>(ActivateLogcatToolWindow)
map <leader>tp <Action>(ActivateProjectToolWindow)
map <leader>tr <Action>(ActivateRunToolWindow)
map <leader>ts <Action>(ActivateStructureToolWindow)
map <leader>tv <Action>(ActivateVersionControlToolWindow)
map <leader>tw <Action>(ActivateBuildVariantsToolWindow)
map <leader>tx <Action>(HideActiveWindow)

" [u]sages
nmap <leader>uf <Action>(FindUsages)
nmap <leader>uh <Action>(HighlightUsagesInFile)
nmap <leader>uo <Action>(SelectAllOccurrences)
nmap <A-n> <Action>(SelectNextOccurrence)
nmap <A-x> <Action>(UnselectPreviousOccurrence)
nmap <leader>us <Action>(ShowUsages)

" [v]ersion control / Git
map <leader>v <Action>(Vcs.QuickListPopupAction)
map <leader>va <Action>(Vcs.Operations.Popup.Annotate)
map <leader>vb <Action>(Annotate)
map <leader>vc <Action>(Git.Commit.Stage)
map <leader>vd <Action>(Compare.SameVersion)
map <leader>vh <Action>(Vcs.ShowTabbedFileHistory)
map <leader>vmc <Action>(VcsShowCurrentChangeMarker)
map <leader>vmn <Action>(VcsShowNextChangeMarker)
map <leader>vmp <Action>(VcsShowPrevChangeMarker)
map <leader>vn <Action>(NextDiff)
map <leader>vp <Action>(PreviousDiff)
map <leader>vr <Action>(Git.ResolveConflicts)
map <leader>vt <Action>(ActivateCommitToolWindow)
map <leader>vz <Action>(Vcs.RollbackChangedLines)
map <leader>vZ <Action>(ChangesView.Revert)

" [y]ank / copy
nmap <leader>yp <Action>(CopyAbsolutePath)
nmap <leader>yr <Action>(CopyReference)

" hide distractions
map <leader>x <Action>(HideAllWindows)
map <leader>za <Action>(ExpandCollapseToggleAction)
map <leader>zc <Action>(CollapseAllRegions)
map <leader>ze <Action>(ExpandAllRegions)
map <leader>zp <Action>(TogglePresentationMode)
map <leader>zz <Action>(ToggleDistractionFreeMode)

" [r]un
map <leader>rc <Action>(ChooseRunConfiguration)
map <leader>rd <Action>(DebugClass)
map <leader>rf <Action>(RerunFailedTests)
map <leader>rg <Action>(Android.SyncProject)
map <leader>rq <Action>(Stop)
map <leader>rr <Action>(Rerun)
map <leader>rt <Action>(RunClass)

" [d]ebug
map <leader>dx <Action>(Debug)
map <leader>da <Action>(AndroidConnectDebuggerAction)
map <leader>db <Action>(ToggleLineBreakpoint)
map <leader>de <Action>(EditBreakpoint)
map <leader>dv <Action>(ViewBreakpoints)

" Ataman
" Remember to bind 'Ataman: Transparent Leader Key' in IDE keymap
nnoremap <Space> :action LeaderAction<cr>
vnoremap <Space> :action LeaderAction<cr>

" Flash plugin setup
nmap s <Action>(flash.search)
xmap s <Action>(flash.search)
nmap S <Action>(flash.treesitter)
" Conflicts with vim-surround in visual mode
" xmap S <Action>(flash.treesitter)
omap r <Action>(flash.remote)

" [H]arpooner plugin
map <leader>he <Action>(HarpoonerToggleQuickMenu)
map <leader>hh <Action>(HarpoonerToggleFile)
map <m-0> <Action>(HarpoonerOpenFile0)
map <m-1> <Action>(HarpoonerOpenFile1)
map <m-2> <Action>(HarpoonerOpenFile2)
map <m-3> <Action>(HarpoonerOpenFile3)
map <m-4> <Action>(HarpoonerOpenFile4)
map <m-5> <Action>(HarpoonerOpenFile5)
map <m-6> <Action>(HarpoonerOpenFile6)
map <c-0> <Action>(HarpoonerReplaceFile0)
map <c-1> <Action>(HarpoonerReplaceFile1)
map <c-2> <Action>(HarpoonerReplaceFile2)
map <c-3> <Action>(HarpoonerReplaceFile3)
map <c-4> <Action>(HarpoonerReplaceFile4)
map <c-5> <Action>(HarpoonerReplaceFile5)
map <c-6> <Action>(HarpoonerReplaceFile6)
