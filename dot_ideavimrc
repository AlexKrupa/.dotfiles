source ~/.vimrc

" IdeaVim
" https://github.com/JetBrains/ideavim/blob/master/doc/set-commands.md
" https://towardsdatascience.com/the-essential-ideavim-remaps-291d4cd3971b

" Syntax for binding IDE actions.
" <Action>(CommandName)
" :action CommandName<CR>
" Both are valid approaches, but <Action> is more readable.
" However, it doesn't work for with `nore` commands, so use :action in those cases.
" List of action ids: https://gist.github.com/zchee/9c78f91cc5ad771c1f5d

" Don't use "end of line comments", Vim will interpret " as a part of a binding

" edit .ideavimrc with \i, reload with \r
nnoremap \i :e ~/.ideavimrc<CR>
"nnoremap \r :source ~/.ideavimrc<CR>
nnoremap \r :action IdeaVim.ReloadVimRc.reload<CR>

" enable using the system clipboard from IdeaVim and vice-versa
set clipboard+=unnamed
set clipboard+=ideaput

" https://github.com/JetBrains/ideavim/blob/ae1ad9fd2e756063e3d768f5bd74e65de889b7e9/doc/ideajoin-examples.md
" J (shift-j)
set ideajoin
set idearefactormode=keep
set ideastatusicon=disabled

" Match XML/HTML tags with %
set matchit

set visualbell

"-------------------
"----- PLUGINS -----
"-------------------

" Which-Key plugin setup (available keybindings in popup)
set which-key
set notimeout
"set timeoutlen=5000
let g:WhichKey_DefaultDelay = 0 " default is 200

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'

let g:NERDTreeMapPreview = 'O'

set multicursor
Plug 'terryma/vim-multiple-cursors'
Plug 'tommcdo/vim-exchange'

" highlightedyank plugin setup
Plug 'machakann/vim-highlightedyank'
let g:highlightedyank_highlight_duration = "500"
let g:highlightedyank_highlight_color = "rgba(57, 197, 187, 155)"

Plug 'dbakker/vim-paragraph-motion'
Plug 'vim-scripts/ReplaceWithRegister'
Plug 'kana/vim-textobj-entire'

" <count>ai	An Indentation level and line above.
" <count>ii	Inner Indentation level (no line above).
" <count>aI	An Indentation level and lines above/below.
" <count>iI	Inner Indentation level (no lines above/below).
Plug 'michaeljsmith/vim-indent-object'

" if - "inner function" - selects the function body (excluding braces)
" af - "around function" - selects the entire function (including braces and signature)
set functiontextobj

Plug 'vim-scripts/argtextobj.vim'
" select items in a list or generic class definition in Java/Kotlin
let g:argtextobj_pairs="[:],(:),<:>"

" In normal mode: Press " to see registers before using them in commands
" In insert mode: Press Ctrl-R to see registers before pasting their contents
set peekaboo

" Switch plugin setup
set switch
nnoremap <C-s> :Switch<CR>
nnoremap <C-S-s> :SwitchReverse<CR>
let g:switch_definitions = 'group:basic'
" Some custom definitions exist in built-in ones, but let's define them for visibility.
let g:switch_custom_definitions = [
  \ switchWords(['val', 'var']),
  \ switchWords(['private', 'internal', 'protected', 'public']),
  \ switchWords(['interface', 'class', 'object']),
  \ switchWords(['open', 'abstract', 'sealed']),
  \ switchWords(['check', 'require']),
  \ switchWords(['checkNotNull', 'requireNotNull']),
  \ switchWords(['isEmpty', 'isNotEmpty']),
  \ switchWords(['isBlank', 'isNotBlank']),
  \ switchWords(['onSuccess', 'onFailure']),
  \ switchWords(['shouldBe', 'shouldNotBe']),
  \ switchWords(['shouldBeNull', 'shouldNotBeNull']),
  \ switchWords(['shouldBeSuccess', 'shouldBeFailure']),
  \ switchWords(['shouldBeTrue', 'shouldBeFalse']),
  \ switchWords(['ON_CREATE', 'ON_START', 'ON_RESUME', 'ON_PAUSE', 'ON_STOP', 'ON_DESTROY']),
  \ switchWords(['INITIALIZED', 'CREATED', 'STARTED', 'RESUMED', 'PAUSED', 'STOPPED', 'DESTROYED']),
  \ switchWords(['Log.v', 'Log.i', 'Log.d', 'Log.w', 'Log.e', 'Log.wtf']),
  \ switchWords(['Timber.v', 'Timber.i', 'Timber.d', 'Timber.w', 'Timber.e', 'Timber.wtf']),
  \ switchNormalizedCaseWords(['on', 'off']),
  \ switchNormalizedCaseWords(['foreground', 'background']),
  \ switchNormalizedCaseWords(['horizontal', 'vertical']),
  \ switchNormalizedCaseWords(['visible', 'invisible']),
  \ switchNormalizedCaseWords(['before', 'after']),
  \ switchNormalizedCaseWords(['below', 'above']),
  \ switchNormalizedCaseWords(['under', 'over']),
  \ switchNormalizedCaseWords(['top', 'bottom', 'start', 'end']),
  \ switchNormalizedCaseWords(['width', 'height']),
  \ switchNormalizedCaseWords(['light', 'dark']),
  \ switchNormalizedCaseWords(['day', 'night']),
  \ switchNormalizedCaseWords(['first', 'last']),
  \ switchNormalizedCaseWords(['min', 'max']),
  \ switchNormalizedCaseWords(['old', 'new']),
  \ switchNormalizedCaseWords(['previous', 'current', 'next']),
  \ switchNormalizedCaseWords(['accept', 'decline']),
  \ switchNormalizedCaseWords(['accepted', 'declined']),
  \ switchNormalizedCaseWords(['accepting', 'declining']),
  \ switchNormalizedCaseWords(['accepts', 'declines']),
  \ switchNormalizedCaseWords(['activate', 'deactivate']),
  \ switchNormalizedCaseWords(['activated', 'deactivated']),
  \ switchNormalizedCaseWords(['activates', 'deactivates']),
  \ switchNormalizedCaseWords(['activating', 'deactivating']),
  \ switchNormalizedCaseWords(['active', 'inactive']),
  \ switchNormalizedCaseWords(['allow', 'deny']),
  \ switchNormalizedCaseWords(['allowed', 'denied']),
  \ switchNormalizedCaseWords(['allowing', 'denying']),
  \ switchNormalizedCaseWords(['allows', 'denies']),
  \ switchNormalizedCaseWords(['attach', 'detach']),
  \ switchNormalizedCaseWords(['attached', 'detached']),
  \ switchNormalizedCaseWords(['attaches', 'detaches']),
  \ switchNormalizedCaseWords(['attaching', 'detaching']),
  \ switchNormalizedCaseWords(['enable', 'disable']),
  \ switchNormalizedCaseWords(['enabled', 'disabled']),
  \ switchNormalizedCaseWords(['enables', 'disables']),
  \ switchNormalizedCaseWords(['enabling', 'disabling']),
  \ switchNormalizedCaseWords(['enter', 'exit']),
  \ switchNormalizedCaseWords(['enters', 'exits']),
  \ switchNormalizedCaseWords(['expand', 'collapse']),
  \ switchNormalizedCaseWords(['expanded', 'collapsed']),
  \ switchNormalizedCaseWords(['expanding', 'collapsing']),
  \ switchNormalizedCaseWords(['expands', 'collapses']),
  \ switchNormalizedCaseWords(['grant', 'revoke']),
  \ switchNormalizedCaseWords(['granted', 'revoked']),
  \ switchNormalizedCaseWords(['granting', 'revoking']),
  \ switchNormalizedCaseWords(['grants', 'revokes']),
  \ switchNormalizedCaseWords(['include', 'exclude']),
  \ switchNormalizedCaseWords(['included', 'excluded']),
  \ switchNormalizedCaseWords(['includes', 'excludes']),
  \ switchNormalizedCaseWords(['including', 'excluding']),
  \ switchNormalizedCaseWords(['increase', 'decrease']),
  \ switchNormalizedCaseWords(['increased', 'decreased']),
  \ switchNormalizedCaseWords(['increases', 'decreases']),
  \ switchNormalizedCaseWords(['increasing', 'decreasing']),
  \ switchNormalizedCaseWords(['open', 'close']),
  \ switchNormalizedCaseWords(['opened', 'closed']),
  \ switchNormalizedCaseWords(['opening', 'closing']),
  \ switchNormalizedCaseWords(['opens', 'closes']),
  \ switchNormalizedCaseWords(['show', 'hide']),
  \ switchNormalizedCaseWords(['showing', 'hiding']),
  \ switchNormalizedCaseWords(['shown', 'hidden']),
  \ switchNormalizedCaseWords(['shows', 'hides']),
  \ switchNormalizedCaseWords(['succeeded', 'failed']),
  \ switchNormalizedCaseWords(['succeeding', 'failing']),
  \ switchNormalizedCaseWords(['succeeds', 'fails']),
  \ switchNormalizedCaseWords(['success', 'failure']),
  \ switchNormalizedCaseWords(['valid', 'invalid']),
  \ switchNormalizedCaseWords(['validated', 'invalidated']),
  \ switchNormalizedCaseWords(['validates', 'invalidates']),
  \ switchNormalizedCaseWords(['validating', 'invalidating'])
\ ]

" Flash plugin setup
nnoremap s <Action>(flash.search)
xnoremap s <Action>(flash.search)

"--------------------
"----- MAPPINGS -----
"--------------------

" splits
noremap <c-/> <Action>(SplitVertically)
noremap <c--> <Action>(SplitHorizontally)
noremap <c-=> <Action>(Unsplit)
noremap <c-tab> <Action>(NextSplitter)
noremap <m-h> <Action>(PrevSplitter)
noremap <m-l> <Action>(NextSplitter)

" movements
nnoremap <c-h> <Action>(Back)
nnoremap <c-l> <Action>(Forward)
" experiment: match Vim history with shift for larger movements
nnoremap <c-s-i> <Action>(Back)
nnoremap <c-s-o> <Action>(Forward)

" Idea smart-select (expanding selection)
nnoremap <m-j> <Action>(EditorUnSelectWord)
nnoremap <m-k> <Action>(EditorSelectWord)
vnoremap <m-j> <Action>(EditorUnSelectWord)
vnoremap <m-k> <Action>(EditorSelectWord)

" generate
nnoremap <leader>go <Action>(OverrideMethods)
nnoremap <leader>gi <Action>(ImplementMethods)
nnoremap <leader>gc <Action>(Generate)

" goto
nnoremap ge <Action>(GotoNextError)
nnoremap gE <Action>(GotoPreviousError)
nnoremap gb <Action>(Back)
nnoremap gd <Action>(GotoDeclaration)
nnoremap gD <Action>(GotoTypeDeclaration)
nnoremap gf <Action>(Forward)
nnoremap gi <Action>(ShowIntentionActions)
nnoremap gI <Action>(GotoImplementation)
nnoremap gl <Action>(QuickJavaDoc)
nnoremap gL <Action>(QuickImplementations)
nnoremap gn <Action>(ShowNavBar)
nnoremap go <Action>(GotoSuperMethod)
nnoremap gs <Action>(FileStructurePopup)
nnoremap gt <Action>(GotoTest)
nnoremap gy <Action>(ShowErrorDescription)

" refactor
nnoremap <leader>r <Action>(Refactorings.QuickListPopupAction)
nnoremap <leader>rd <Action>(SafeDelete)
nnoremap <leader>rec <Action>(IntroduceConstant)
nnoremap <leader>ref <Action>(IntroduceProperty)
nnoremap <leader>rem <Action>(ExtractMethod)
nnoremap <leader>rev <Action>(IntroduceVariable)
nnoremap <leader>rf <Action>(ReformatCode)
nnoremap <leader>ri <Action>(Inline)
" KDoc formatting plugin
nnoremap <leader>rk <Action>(ReflowKDoc)
nnoremap <leader>ro <Action>(OptimizeImports)
nnoremap <leader>rm <Action>(MoveElement)
nnoremap <leader>rn <Action>(RenameElement)
" wrap
nnoremap <leader>rw <Action>(SurroundWith)
nnoremap <leader>ru <Action>(Unwrap)

" search
noremap <leader>sa <Action>(GotoAction)
noremap <leader>sc <Action>(GotoClass)
noremap <leader>se <Action>(SearchEverywhere)
noremap <leader>sf <Action>(GotoFile)
noremap <leader>sl <Action>(RecentLocations)
noremap <leader>so <Action>(ReplaceInPath)
noremap <leader>sp <Action>(FindInPath)
noremap <leader>sr <Action>(RecentFiles)
noremap <leader>ss <Action>(GotoSymbol)
noremap <leader>st <Action>(TextSearchAction)

" hierarchy
nnoremap <leader>hc <Action>(CallHierarchy)
nnoremap <leader>hm <Action>(MethodHierarchy)
nnoremap <leader>ht <Action>(TypeHierarchy)

" menu
nnoremap <leader>mt <Action>(ToolWindowsGroup)
nnoremap <leader>ms <Action>(ScopeViewPopupMenu)

" bookmark
nnoremap mm <Action>(ToggleBookmark)
nnoremap ma <Action>(ShowBookmarks)

" quick actions
nnoremap <leader>qf <Action>(ShowIntentionActions)
nnoremap <leader>qp <Action>(QuickPreview)
nnoremap <leader>qd <Action>(QuickDefinition)
nnoremap <leader>qD <Action>(QuickTypeDefinition)
nnoremap <leader>qr <Action>(ToggleRenderedDocPresentation)

" usages
nnoremap <leader>uf <Action>(FindUsages)
nnoremap <leader>uh <Action>(HighlightUsagesInFile)
nnoremap <leader>uo <Action>(SelectAllOccurrences)
nnoremap <leader>us <Action>(ShowUsages)

" VCS/Git
noremap <leader>v <Action>(Vcs.QuickListPopupAction)
noremap <leader>va <Action>(Annotate)
noremap <leader>vc <Action>(ActivateCommitToolWindow)
noremap <leader>vk <Action>(Git.Commit.Stage)
noremap <leader>vd <Action>(Compare.SameVersion)
noremap <leader>vh <Action>(Vcs.ShowTabbedFileHistory)
noremap <leader>vr <Action>(Git.ResolveConflicts)

" yank/copy
nnoremap <leader>yp <Action>(CopyAbsolutePath)
nnoremap <leader>yr <Action>(CopyReference)

" hide distractions
noremap <leader>x <Action>(HideAllWindows)
noremap <leader>zz <Action>(ToggleDistractionFreeMode)
noremap <leader>zp <Action>(TogglePresentationMode)

" collapse/expand regions
nnoremap <leader>za <Action>(ExpandCollapseToggleAction)
noremap <leader>zc <Action>(CollapseAllRegions)
nnoremap <leader>ze <Action>(ExpandAllRegions)

" build
noremap <leader>bg <Action>(Android.SyncProject)
noremap <leader>bv <Action>(ActivateBuildVariantsToolWindow)

" run
" make sure to check binding colisions with refactorings above
noremap <leader>rc <Action>(ChooseRunConfiguration)
noremap <leader>rq <Action>(Stop)
noremap <leader>rr <Action>(Rerun)

" debug
noremap <leader>dx <Action>(Debug)
noremap <leader>db <Action>(ToggleLineBreakpoint)
noremap <leader>de <Action>(EditBreakpoint)
noremap <leader>dv <Action>(ViewBreakpoints)

"-----------------------
"----- HARPOONER -----
"-----------------------

nnoremap <leader>he <Action>(HarpoonerToggleQuickMenu)
nnoremap <leader>hh <Action>(HarpoonerToggleFile)
nnoremap <m-0> <Action>(HarpoonerOpenFile0)
nnoremap <m-1> <Action>(HarpoonerOpenFile1)
nnoremap <m-2> <Action>(HarpoonerOpenFile2)
nnoremap <m-3> <Action>(HarpoonerOpenFile3)
nnoremap <m-4> <Action>(HarpoonerOpenFile4)
nnoremap <m-5> <Action>(HarpoonerOpenFile5)
nnoremap <m-6> <Action>(HarpoonerOpenFile6)
nnoremap <c-0> <Action>(HarpoonerReplaceFile0)
nnoremap <c-1> <Action>(HarpoonerReplaceFile1)
nnoremap <c-2> <Action>(HarpoonerReplaceFile2)
nnoremap <c-3> <Action>(HarpoonerReplaceFile3)
nnoremap <c-4> <Action>(HarpoonerReplaceFile4)
nnoremap <c-5> <Action>(HarpoonerReplaceFile5)
nnoremap <c-6> <Action>(HarpoonerReplaceFile6)
