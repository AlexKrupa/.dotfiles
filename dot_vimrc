"source $VIMRUNTIME/defaults.vim

" set shell=/bin/zsh
set shell=/opt/homebrew/bin/fish

" Use fzf in Vim
set rtp+=/opt/homebrew/opt/fzf

syntax on
filetype on
filetype plugin on
filetype indent on

" default is \ backslash
let mapleader=" "

set nocp
set clipboard=unnamed

" Block cursor
" set guicursor=""

set relativenumber
set number

set incsearch
set hlsearch

set shiftwidth=2
set tabstop=2
set softtabstop=2
set expandtab
set smartindent
set nowrap

set signcolumn=no

set nobackup

set ignorecase
set smartcase
set showcmd
set showmode
set showmatch

set scrolloff=8
set history=1000

set termguicolors

set updatetime=750

" automatically leave insert mode after 'updatetime' milliseconds of inaction
au CursorHoldI * stopinsert

" set 'updatetime' to 10 seconds when in insert mode
au InsertEnter * let updaterestore=&updatetime | set updatetime=10000
au InsertLeave * let &updatetime=updaterestore

" edit .vimrc with \e, reload with \r
nnoremap \e :e ~/.vimrc<CR>
nnoremap \r :source ~/.vimrc<CR>

" Clear highlight on ESC
nnoremap <esc> :noh<CR><esc>

" unused
nnoremap Q <nop>

" Unbind arrow keys to learn HJKL
noremap <left> <nop>
noremap <right> <nop>
noremap <up> <nop>
noremap <down> <nop>

" Map CTRL-c to ESC
noremap <C-c> <Esc>

" Move between blocks
noremap <C-j> }
noremap <C-k> {

" Map Alt+O/Alt+Shift+O (down/up) to new line in normal mode
nnoremap <A-o> o<Esc>k
nnoremap <A-S-o> O<Esc>j

" Allow moving lines with Alt+J/Alt+K
" https://stackoverflow.com/questions/7501092/can-i-map-alt-key-in-vim
" down: ∆
" up: Ż
nnoremap <A-S-j> :m .+1<CR>==
nnoremap <A-S-k> :m .-2<CR>==

inoremap <A-S-j> <Esc>:m .+1<CR>==gi
inoremap <A-S-k> <Esc>:m .-2<CR>==gi

vnoremap <A-S-j> :m '>+1<CR>gv=gv
vnoremap <A-S-k> :m '<-2<CR>gv=gv

" Keep cursor in place when joining lines with Shift-J
" nnoremap <S-j> mzJ`z

" Keep cursor in the middle when jumping with Ctrl+D/Ctrl+U
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

" Keep search terms in the middle
nnoremap n nzzzv
nnoremap N Nzzzv

" Redo with U
noremap U <C-R>

" Don't yank x to default register ever
nnoremap x "_x
vnoremap x "_x

" Don't yank change to default register ever
nnoremap c "_c
xnoremap c "_c

" Don't yank delete to default register if prefixed by leader
nnoremap <leader>d "_d
vnoremap <leader>d "_d
nnoremap <leader>D "_D
vnoremap <leader>D "_D

" Don't yank selection to register if pasting prefixed by leader
vnoremap <leader>p "_dP

"------------------
"----- MACROS -----
"------------------

" Remove prefix
" Go to start of word, toggle case and start typing. E.g. `<leader>iget`: `property` -> `getProperty`
nnoremap <leader>pi wb~hi

" Add prefix
" Remove selection and toggle case. E.g. `v2l<leader>u`: `getProperty` -> `property`
vnoremap <leader>pu d~h

" Replace word under cursor with <leader>s, doesn't work in IdeaVim
" nnoremap <leader>s :%s/<c-r><c-w>/<c-r><c-w>/gI<Left><Left><Left>

" Log selection
vnoremap <leader>ltv yoTimber.v("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>lti yoTimber.i("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>ltd yoTimber.d("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>ltw yoTimber.w("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>lte yoTimber.e("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>ltf yoTimber.wtf("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>llv yoLog.v("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>lli yoLog.i("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>lld yoLog.d("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>llw yoLog.w("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>lle yoLog.e("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>llf yoLog.wtf("<Esc>pa=${<Esc>pa}")<Esc>
vnoremap <leader>lp yoprintln("<Esc>pa=${<Esc>pa}")<Esc>

" Format whole file or selection JSON with jq
nnoremap <silent> <leader>fj :%!jq<CR>
vnoremap <silent> <leader>fj :'<,'>!jq<CR>
nnoremap <silent> <leader>fcj :%!jq --compact-output<CR>
vnoremap <silent> <leader>fcj :'<,'>!jq --compact-output<CR>
